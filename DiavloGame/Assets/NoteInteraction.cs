using System.Collections;
using System.Collections.Generic;
using UnityEngine;
//Name: Sree Bandi & Daniel Rusetski 
//Date: November 12, 2020
//Assignment: ICS3U1 Culminating Assignment 
//Script Name: NoteInteraction
//Purpose of Script: Senses if a note is hit or missed and determines the type of hit (The interaction between the button being pressed and the note). 
//Public class can be accessed by other scripts.
public class NoteInteraction : MonoBehaviour //Auto-generated by Unity, MonoBehaviour is the base class from which every Unity script derives. See https://docs.unity3d.com/ScriptReference/MonoBehaviour.html.
{
    //Public variable so that value can be accessed across multiple methods and can be seen as being true in the inspector for easy error testing (seen as a check box in the inspector). Bool used to check if the game has started. 
    public bool CanBePressed;
    //Public variable so that value can be set in the inspector (usually done by choosing the key the variable binds to with the inspector box this is also why there is no =), this is an empty variable for a keyboard key bind. The key that must be pressed down to hit a note/press down a button; 
    public KeyCode KeyToPress;
    //Public variable so that value can be set in the inspector (usually done by clicking and dragging the desired component into the box, this is also why there is no =), this is an empty variable meant for the component SpriteRenderer which can be found in the inspector, it is used to render the sprites and make them visible in the game.
    public SpriteRenderer TheSR;
    //Public variable so that value can be accessed across multiple methods and can be seen as being true in the inspector for easy error testing (seen as a check box in the inspector). Bool used for determining if the player has started playing. 
    public bool StartPlaying;
    //Public variable so that value can be set in the inspector(usually done by choosing the key the variable binds to with the inspector box this is also why there is no =), this is an empty variable for a keyboard key bind. The key used to start the game when pressed.
    public KeyCode StartKey;
    //Public array so that values can be set in the inspector (usually done by clicking and dragging the desired datatype objects into the box, this is also why there is no ={};), this is an empty array meant to store Sprites. The length of the array and the Sprites for each index is set using the inspector. 
    public Sprite[] NoteTypes;
    // Start is called before the first frame update
    void Start()//Auto-generated by Unity, this code means that the code in this method (A method is a code block that contains a series of statements). This is not a private void so it can be accessed by any class, as it has the Start() function it and runs once upon the start of the program (for one frame). The void keyword is used in method signatures to declare a method that does not return a value.
    {
        //GetComponent retrieves a specified component from the inspector, in this we are setting TheSR to equal to the SpriteRenderer by retrieving the component of SpriteRenderer for the object the script is attached to.
        TheSR = GetComponent<SpriteRenderer>();
        //This disables SpriteRenderer so that the sprites do not appear until the StartKey is pressed. 
        TheSR.enabled = false;
    }

    // Update is called once per frame
    void Update()//Auto-generated by Unity, Update is called every frame, if the MonoBehaviour is enabled, this means that the code within the update method repeats once every frame.The void keyword is used in method signatures to declare a method that does not return a value.
    {
        //This if statement is used to execute a block of code by determining if the player has started playing or not with the bool StartPlaying, if the player has not started playing so StartPlaying is false, then by pressing the StartKey the game will start as the bool will become true.
        if (!StartPlaying)
        {
            //This if statements ensures that this block of code will run only when the StartKey is pressed, as Input.GetKeyDown refers to when the input of a key on the keyboard being pressed. The key in the brackets is the variable that was bound to a specific key.
            if (Input.GetKeyDown(StartKey))
            {
                //The bool StartPlaying becomes true. 
                StartPlaying = true;
                //This enables SpriteRenderer so that the sprites do appear if the StartKey is pressed. 
                TheSR.enabled = true;
            }
        }
        //This if statement is used to execute a block of code by determining if the player has started playing or not with the bool StartPlaying, if the player has started playing so StartPlaying then the block of code inside will execute. 
        if (StartPlaying == true)
        {
            //This if statement determine if the block of code inside it will run when the KeyToPress is pressed down as Input.GetKeyDown refers to when the input of a key on the keyboard being pressed down. The key in the brackets is the variable that was bound to a specific key.
            if (Input.GetKeyDown(KeyToPress))
            {
                //This if statement is used to execute a block of code by determining if the note can be pressed.
                if (CanBePressed == true)
                {
                    //This if statement is used to determine if the note was pressed a distance of 25 y away from the center of the button to determine if it was a normal hit. 
                    if ((transform.position.y) >= 21f || (transform.position.y) < 20.7f)
                    {
                        //The NoteType index 0 sprite is rendered by the SpriteRenderer (The Hit! effect).
                        TheSR.sprite = NoteTypes[0];
                        //The sprite is then destroyed after 0.1s as it was hit. 
                        Destroy(TheSR, 0.1f);
                        //This tells the NormalHit method in the GameManger object that this note hit was a normal hit 
                        GameManager.instance.NormalHit();
                        //This tells the Animation script the note was hit in the note hit method.
                        MainAnim.instance1.NormalHit();
                        //This tells the Animation script the note was hit in the note hit method.
                        SecondAnim.instance2.NormalHit();
                    }
                    //This if statement is used to determine if the note was pressed a distance of 10 y away from the center of the button to determine if it was a good hit.
                    else if ((transform.position.y) >= 20.85f || (transform.position.y) < 20.7f)
                    {
                        //The NoteType index 1 sprite is rendered by the SpriteRenderer (The Good! effect). 
                        TheSR.sprite = NoteTypes[1];
                        //The sprite is then destroyed after 0.1s as it was hit. 
                        Destroy(TheSR, 0.1f);
                        //This tells the GoodHit method in the GameManger object that this note hit was a good hit 
                        GameManager.instance.GoodHit();
                        //This tells the Animation script the note was hit in the note hit method.
                        MainAnim.instance1.NormalHit();
                        //This tells the Animation script the note was hit in the note hit method.
                        SecondAnim.instance2.NormalHit();
                    }
                    else if ((transform.position.y) >= 20.75f)
                    {
                        //The NoteType index 2 sprite is rendered by the SpriteRenderer (The Perfect! effect).
                        TheSR.sprite = NoteTypes[2];
                        //The sprite is then destroyed after 0.1s as it was hit. 
                        Destroy(TheSR, 0.1f);
                        //This tells the PerfectHit method in the GameManger object that this note hit was a perfect hit 
                        GameManager.instance.PerfectHit();
                        //This tells the Animation script the note was a hit in the note hit method.
                        MainAnim.instance1.NormalHit();
                        //This tells the Animation script the note was hit in the note hit method.
                        SecondAnim.instance2.NormalHit();
                    }
                }

            }
        }
    }
    //This is new private void method (see the comment on void Start() for defintion of method) that does not return anything and can only be accessed by the class in which is it contained, in this case can only be accessed by the Collider class), this method is for when the note's collider created with BoxCollider and RigidBody components enters the trigger zone of the button created with the BoxCollider and RigidBody component (hence the Collider other). TLDR; when the collison occurs.
    private void OnTriggerEnter(Collider other) 
    {
        //This if statement executes for if the tag of the object with the Collider component is Activator.
        if (other.tag == "Activator")
        {
            //The bool CanBePressed is set to equal true; 
            CanBePressed = true;
        }
    }
    //This is new private void method( see the comment on void Start() for defintion of method) that does not return anything and can only be accessed by the class in which is it contained, in this case can only be accessed by the Collider class), this method is for when the note's collider created with BoxCollider and RigidBody components exits the trigger zone of the button created with the BoxCollider and RigidBody component (hence the Collider other). TLDR; when the collison ends.
    private void OnTriggerExit(Collider other)
    {
        //This if statement executes for if the tag of the object with the Collider component is Activator.
        if (other.tag == "Activator")
        {
            //The bool CanBePressed is set to equal false; 
            CanBePressed = false;
            //This if statement is for if the bool CanBePressed is false then the block of code in it executes. 
            if(CanBePressed == false)
            {
                //This if statement executes the block of code when the Sprite of the note is not already rendered as a normal, good or perfect hit using the NoteType array and the respective index numbers of each type of hit's sprite (To prevent the note from being hit after it is missed in the 0.1 second time it is not destroyed).
                if (TheSR.sprite != NoteTypes[0] && TheSR.sprite != NoteTypes[1] && TheSR.sprite != NoteTypes[2])
                {
                    //The NoteType index 3 sprite is rendered by the SpriteRenderer (The Miss! effect).
                    TheSR.sprite = NoteTypes[3];
                    //The sprite is then destroyed after 0.1s as it was hit. 
                    Destroy(TheSR, 0.1f);
                    //This tells the PerfectHit method in the GameManger object that this note hit was a missed hit 
                    GameManager.instance.NoteMissed();
                    //This tells the Animation script the note was missed in the note missed method.
                    MainAnim.instance1.NoteMissed();
                    //This tells the Animation script the note was missed in the note missed method.
                    SecondAnim.instance2.NoteMissed();
                }
            }  
        }
    }
}
